
import java.lang.reflect.InvocationTargetException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Ez az osztály a pályákat tölti be, illetve törli egy adatbázis lekérdezés
 * segítségével.
 * @author Nagy Norbert
 */
public class BetoltesGUI extends javax.swing.JFrame {

    /**
     * Az osztály alap konstruktora.
     */
    public BetoltesGUI() {
        initComponents();
    }
    /**
     * Az osztály bővített konstruktora, létrejöttekor lekérdezi a pálya neveket
     * az adatbázisből és megjeleníti őket egy listában.
     * @param p a Palya osztály referenciája
     * @throws SQLException 
     */
    public BetoltesGUI(Palya p) throws SQLException {
        initComponents();
        setVisible(true);
        palyaNevekMegjelenitese(palyaNevekLekerdezese());
        this.palya = p;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Betöltés");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Törlés");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addContainerGap(92, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * A palya betoltes metódusának átadja a felhasználó által kiválasztott
     * elemet.
     * @param evt esemény ahol a kattintás lett végrehajtva
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            palya.betoltes(jList1.getSelectedValue());
        } catch (SQLException | NoSuchMethodException | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
            Logger.getLogger(BetoltesGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * Az adatbázisből törli a felhasználó által kiválasztott elemet.
     * @param evt esemény ahol a kattintás lett végrehajtva
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Connection kapcsolat = null;
        Statement lekerdezes = null;
        try{
            Class.forName("com.mysql.jdbc.Driver");
            kapcsolat = DriverManager.getConnection("jdbc:mysql://localhost/aknakereso", "root", "");
            lekerdezes = kapcsolat.createStatement();
            lekerdezes.execute("DELETE FROM palya WHERE nev='" + jList1.getSelectedValue() + "'");
        }catch(ClassNotFoundException | SQLException e){
            System.out.println(e.getMessage());
        }finally{
            try {
                if (lekerdezes!=null)
                    lekerdezes.close();
                if (kapcsolat!=null)
                    kapcsolat.close();
            } catch (SQLException ex) {
                Logger.getLogger(BetoltesGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            palyaNevekMegjelenitese(palyaNevekLekerdezese());
        } catch (SQLException ex) {
            Logger.getLogger(BetoltesGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * Az adatbázisból lekérdezi a benne szereplő pálya neveket.
     * @return egy ArrayList amely az adatbázisban szereplő pálya neveket tartalmazza
     * @throws SQLException 
     */
    public ArrayList<String> palyaNevekLekerdezese() throws SQLException {
        ArrayList<String> sqlNevek = new ArrayList<>();
        Connection kapcsolat = null;
        Statement lekerdezes = null;
        try{
            Class.forName("com.mysql.jdbc.Driver");
            kapcsolat = DriverManager.getConnection("jdbc:mysql://localhost/aknakereso", "root", "");
            lekerdezes = kapcsolat.createStatement();
            ResultSet eredmeny = lekerdezes.executeQuery("SELECT nev FROM palya");
            
            while (eredmeny.next()) {
                sqlNevek.add(eredmeny.getString("nev"));
            }
        }catch(ClassNotFoundException | SQLException e){
            System.out.println(e.getMessage());
        }finally{
            if (lekerdezes!=null)
                lekerdezes.close();
            if (kapcsolat!=null)
                kapcsolat.close();
        }
        return sqlNevek;
    }
    /**
     * A paraméterben megkapott ArrayList elemeit hozzáadja a UI listához (jList1).
     * @param lista egy ArrayList amely String-eket tartalmaz
     */
    public void palyaNevekMegjelenitese(ArrayList<String> lista) {
        DefaultListModel dlm = new DefaultListModel();
        for(String nev : lista) {
            dlm.addElement(nev);
        }
        jList1.setModel(dlm);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BetoltesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BetoltesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BetoltesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BetoltesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BetoltesGUI().setVisible(true);
            }
        });
    }
    /** a Palya osztály példánya, a metódusai miatt szükséges */
    private Palya palya;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
